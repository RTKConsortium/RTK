#line 2 "../../src/scanner.cc"

#line 4 "../../src/scanner.cc"

#define YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#  define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#  define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#  if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#    ifndef __STDC_LIMIT_MACROS
#      define __STDC_LIMIT_MACROS 1
#    endif

#    include <inttypes.h>
typedef int8_t   flex_int8_t;
typedef uint8_t  flex_uint8_t;
typedef int16_t  flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t  flex_int32_t;
typedef uint32_t flex_uint32_t;
#  else
typedef signed char        flex_int8_t;
typedef short int          flex_int16_t;
typedef int                flex_int32_t;
typedef unsigned char      flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int       flex_uint32_t;

/* Limits of integral types. */
#    ifndef INT8_MIN
#      define INT8_MIN (-128)
#    endif
#    ifndef INT16_MIN
#      define INT16_MIN (-32767 - 1)
#    endif
#    ifndef INT32_MIN
#      define INT32_MIN (-2147483647 - 1)
#    endif
#    ifndef INT8_MAX
#      define INT8_MAX (127)
#    endif
#    ifndef INT16_MAX
#      define INT16_MAX (32767)
#    endif
#    ifndef INT32_MAX
#      define INT32_MAX (2147483647)
#    endif
#    ifndef UINT8_MAX
#      define UINT8_MAX (255U)
#    endif
#    ifndef UINT16_MAX
#      define UINT16_MAX (65535U)
#    endif
#    ifndef UINT32_MAX
#      define UINT32_MAX (4294967295U)
#    endif

#  endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#  define YY_USE_CONST

#else /* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#  if defined(__STDC__)

#    define YY_USE_CONST

#  endif /* defined (__STDC__) */
#endif   /* ! __cplusplus */

#ifdef YY_USE_CONST
#  define yyconst const
#else
#  define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int)(unsigned char)c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin)

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#  ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#    define YY_BUF_SIZE 32768
#  else
#    define YY_BUF_SIZE 16384
#  endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#  define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state * YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
 *       access to the local variable yy_act. Since yyless() is a macro, it would break
 *       existing scanners that call yyless() from OUTSIDE yylex.
 *       One obvious solution it to make yy_act a global. I tried that, and saw
 *       a 5% performance hit in a non-yylineno scanner, because yy_act is
 *       normally declared as a register variable-- so it is not worth it.
 */
#define YY_LESS_LINENO(n)              \
  do                                   \
  {                                    \
    int yyl;                           \
    for (yyl = n; yyl < yyleng; ++yyl) \
      if (yytext[yyl] == '\n')         \
        --yylineno;                    \
  } while (0)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n)                                                                           \
  do                                                                                        \
  {                                                                                         \
    /* Undo effects of setting up yytext. */                                                \
    int yyless_macro_arg = (n);                                                             \
    YY_LESS_LINENO(yyless_macro_arg);                                                       \
    *yy_cp = (yy_hold_char);                                                                \
    YY_RESTORE_YY_MORE_OFFSET(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
    YY_DO_BEFORE_ACTION; /* set up yytext again */                                          \
  } while (0)

#define unput(c) yyunput(c, (yytext_ptr))

#ifndef YY_TYPEDEF_YY_SIZE_T
#  define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#  define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
{
  FILE * yy_input_file;

  char * yy_ch_buf;  /* input buffer */
  char * yy_buf_pos; /* current position in input buffer */

  /* Size of input buffer in bytes, not including room for EOB
   * characters.
   */
  yy_size_t yy_buf_size;

  /* Number of characters read into yy_ch_buf, not including EOB
   * characters.
   */
  int yy_n_chars;

  /* Whether we "own" the buffer - i.e., we know we created it,
   * and can realloc() it to grow it, and should free() it to
   * delete it.
   */
  int yy_is_our_buffer;

  /* Whether this is an "interactive" input source; if so, and
   * if we're using stdio for input, then we want to use getc()
   * instead of fread(), to make sure we stop fetching input after
   * each newline.
   */
  int yy_is_interactive;

  /* Whether we're considered to be at the beginning of a line.
   * If so, '^' rules will be active on the next match, otherwise
   * not.
   */
  int yy_at_bol;

  int yy_bs_lineno; /**< The line count. */
  int yy_bs_column; /**< The column count. */

  /* Whether to try to fill the input buffer when we reach the
   * end of it.
   */
  int yy_fill_buffer;

  int yy_buffer_status;

#  define YY_BUFFER_NEW 0
#  define YY_BUFFER_NORMAL 1
  /* When an EOF's been seen but there's still some text to process
   * then we mark the buffer as YY_EOF_PENDING, to indicate that we
   * shouldn't try reading from the input source any more.  We might
   * still have a bunch of tokens to match, though, because of
   * possible backing-up.
   *
   * When we actually see the EOF, we change the status to "new"
   * (via yyrestart()), so that the user can continue scanning by
   * just pointing yyin at a new input file.
   */
#  define YY_BUFFER_EOF_PENDING 2
};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t            yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t            yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0;     /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ((yy_buffer_stack) ? (yy_buffer_stack)[(yy_buffer_stack_top)] : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int  yy_n_chars; /* number of characters read into yy_ch_buf */
int         yyleng;

/* Points to current character in buffer. */
static char * yy_c_buf_p = (char *)0;
static int    yy_init = 0;  /* whether we need to initialize */
static int    yy_start = 0; /* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void
yyrestart(FILE * input_file);
void
yy_switch_to_buffer(YY_BUFFER_STATE new_buffer);
YY_BUFFER_STATE
yy_create_buffer(FILE * file, int size);
void
yy_delete_buffer(YY_BUFFER_STATE b);
void
yy_flush_buffer(YY_BUFFER_STATE b);
void
yypush_buffer_state(YY_BUFFER_STATE new_buffer);
void
yypop_buffer_state(void);

static void
yyensure_buffer_stack(void);
static void
yy_load_buffer_state(void);
static void
yy_init_buffer(YY_BUFFER_STATE b, FILE * file);

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER)

YY_BUFFER_STATE
yy_scan_buffer(char * base, yy_size_t size);
YY_BUFFER_STATE
yy_scan_string(yyconst char * yy_str);
YY_BUFFER_STATE
yy_scan_bytes(yyconst char * bytes, int len);

void * yyalloc(yy_size_t);
void *
yyrealloc(void *, yy_size_t);
void
yyfree(void *);

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive)                            \
  {                                                                   \
    if (!YY_CURRENT_BUFFER)                                           \
    {                                                                 \
      yyensure_buffer_stack();                                        \
      YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE); \
    }                                                                 \
    YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive;     \
  }

#define yy_set_bol(at_bol)                                            \
  {                                                                   \
    if (!YY_CURRENT_BUFFER)                                           \
    {                                                                 \
      yyensure_buffer_stack();                                        \
      YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE); \
    }                                                                 \
    YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol;                     \
  }

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *)0, *yyout = (FILE *)0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char * yytext;
#define yytext_ptr yytext

static yy_state_type
yy_get_previous_state(void);
static yy_state_type
yy_try_NUL_trans(yy_state_type current_state);
static int
yy_get_next_buffer(void);
static void
yy_fatal_error(yyconst char msg[]);

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION         \
  (yytext_ptr) = yy_bp;             \
  yyleng = (size_t)(yy_cp - yy_bp); \
  (yy_hold_char) = *yy_cp;          \
  *yy_cp = '\0';                    \
  (yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 62
#define YY_END_OF_BUFFER 63
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
{
  flex_int32_t yy_verify;
  flex_int32_t yy_nxt;
};
static yyconst flex_int16_t yy_accept[246] = {
  0,  0,  0,  0,  0,  0,  0,  63, 61, 57, 59, 60, 56, 48, 58, 43, 42, 47, 41, 47, 47, 47, 47, 47, 47, 47,
  47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 62, 46, 44, 45, 55, 51, 55, 54, 55, 57, 59, 56, 58, 0,  0,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  15, 0,  18, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  45,
  51, 52, 0,  53, 0,  50, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  19, 0,

  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  14, 49, 0,  40, 0,  0,  0,  0,  0,  0,  0,  9,  17, 0,  0,
  0,  4,  28, 0,  0,  0,  0,  0,  0,  0,  0,  39, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5,  25,
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  22, 0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  0,
  0,  36, 0,  0,  0,  0,  0,  16, 0,  0,  0,  0,  1,  0,  35, 0,  0,  23, 0,  30, 0,  0,

  38, 0,  0,  0,  0,  0,  0,  0,  0,  10, 20, 0,  34, 24, 11, 0,  27, 37, 0,  0,  0,  0,  8,  29, 0,  31,
  0,  0,  0,  26, 0,  0,  0,  0,  0,  0,  0,  7,  13, 0,  32, 21, 12, 33, 0
};

static yyconst flex_int32_t yy_ec[256] = {
  0,  1,  1,  1,  1,  1,  1,  1,  1,  2,  3,  1,  1,  4,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
  1,  1,  1,  1,  5,  1,  6,  7,  1,  1,  1,  1,  8,  9,  1,  1,  10, 11, 1,  1,  12, 12, 12, 12, 12, 12, 12, 12,
  12, 12, 1,  1,  1,  13, 1,  14, 1,  15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
  15, 15, 15, 15, 15, 15, 15, 1,  16, 1,  1,  1,  1,  17, 18, 19, 20,

  21, 22, 23, 24, 25, 15, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 15, 38, 39, 15, 1,  1,  1,  1,  1,  1,
  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,

  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
};

static yyconst flex_int32_t yy_meta[40] = { 0, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };

static yyconst flex_int16_t yy_base[250] = {
  0,   0,   0,   37,  47,  39,  57,  271, 272, 268, 0,   272, 264, 272, 0,   272, 272, 272, 272, 235, 32,
  238, 239, 232, 239, 234, 232, 34,  231, 43,  30,  239, 47,  36,  225, 59,  237, 272, 272, 272, 245, 272,
  253, 272, 272, 78,  253, 0,   249, 0,   230, 55,  216, 215, 61,  220, 229, 213, 218, 226, 218, 272, 222,
  272, 208, 223, 208, 208, 220, 208, 204, 198, 204, 217, 206, 199, 197, 218, 226, 272, 64,  272, 199, 272,
  58,  70,  206, 207, 208, 206, 195, 199, 204, 184, 199, 272, 195, 196, 181, 272, 190,

  188, 182, 176, 176, 177, 184, 173, 186, 183, 169, 170, 272, 272, 172, 272, 166, 168, 170, 170, 165, 172,
  169, 272, 272, 160, 163, 172, 75,  76,  167, 161, 173, 159, 163, 162, 151, 156, 272, 150, 162, 161, 156,
  145, 152, 148, 157, 156, 150, 147, 152, 272, 79,  143, 141, 140, 148, 137, 136, 137, 142, 130, 130, 132,
  272, 138, 125, 272, 125, 128, 132, 121, 119, 133, 123, 121, 117, 272, 129, 118, 272, 112, 118, 112, 110,
  117, 126, 121, 120, 119, 110, 272, 105, 272, 108, 106, 272, 104, 272, 105, 98,

  272, 98,  96,  112, 106, 109, 102, 105, 98,  272, 272, 104, 103, 272, 272, 93,  272, 272, 96,  101, 94,
  91,  272, 272, 87,  272, 95,  98,  84,  272, 78,  84,  75,  69,  74,  71,  68,  272, 272, 66,  272, 272,
  272, 272, 272, 109, 111, 78,  51
};

static yyconst flex_int16_t yy_def[250] = {
  0,   245, 1,   246, 246, 247, 247, 245, 245, 245, 248, 245, 245, 245, 249, 245, 245, 245, 245, 245, 245,
  245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245,
  245, 245, 245, 245, 245, 248, 245, 249, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245,
  245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245,
  245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245,

  245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245,
  245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245,
  245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245,
  245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245,
  245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245,

  245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245,
  245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245,
  245, 245, 0,   245, 245, 245, 245
};

static yyconst flex_int16_t yy_nxt[312] = {
  0,   8,   9,   10,  11,  12,  13,  14,  15,  8,   16,  17,  17,  18,  17,  17,  8,   19,  17,  17,  20,
  21,  22,  23,  24,  25,  17,  26,  27,  28,  29,  30,  17,  31,  32,  33,  34,  35,  17,  36,  37,  11,
  42,  43,  14,  44,  38,  65,  39,  40,  37,  11,  49,  51,  14,  45,  38,  71,  39,  40,  42,  43,  52,
  44,  59,  62,  66,  79,  68,  80,  60,  69,  63,  45,  64,  72,  74,  85,  91,  47,  75,  79,  70,  80,
  81,  244, 86,  116, 114, 87,  88,  92,  115, 117, 82,  154, 156, 243, 118, 178, 242,

  241, 155, 240, 239, 238, 157, 83,  237, 179, 8,   8,   41,  41,  236, 235, 234, 233, 232, 231, 230, 229,
  228, 227, 112, 61,  226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210,
  209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189,
  188, 187, 186, 185, 184, 183, 182, 181, 180, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166,
  165, 164, 163, 162, 161, 160, 159, 158, 153, 152, 151, 150, 149, 148, 147, 146,

  145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125,
  124, 123, 122, 121, 120, 119, 113, 78,  77,  112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101,
  100, 99,  98,  97,  96,  95,  94,  93,  90,  89,  84,  48,  46,  78,  77,  76,  73,  67,  61,  58,  57,
  56,  55,  54,  53,  50,  48,  46,  245, 7,   245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245,
  245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245,

  245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245
};

static yyconst flex_int16_t yy_chk[312] = {
  0,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
  1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   3,   3,
  5,   5,   3,   5,   3,   30,  3,   3,   4,   4,   249, 20,  4,   5,   4,   33,  4,   4,   6,   6,   20,
  6,   27,  29,  30,  80,  32,  80,  27,  32,  29,  6,   29,  33,  35,  51,  54,  248, 35,  45,  32,  45,
  45,  240, 51,  85,  84,  51,  51,  54,  84,  85,  45,  128, 129, 237, 85,  152, 236,

  235, 128, 234, 233, 232, 129, 45,  231, 152, 246, 246, 247, 247, 229, 228, 227, 225, 222, 221, 220, 219,
  216, 213, 212, 209, 208, 207, 206, 205, 204, 203, 202, 200, 199, 197, 195, 194, 192, 190, 189, 188, 187,
  186, 185, 184, 183, 182, 181, 179, 178, 176, 175, 174, 173, 172, 171, 170, 169, 168, 166, 165, 163, 162,
  161, 160, 159, 158, 157, 156, 155, 154, 153, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139,
  137, 136, 135, 134, 133, 132, 131, 130, 127, 126, 125, 122, 121, 120, 119, 118,

  117, 116, 114, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 98,  97,  96,  94,  93,  92,
  91,  90,  89,  88,  87,  86,  82,  78,  77,  76,  75,  74,  73,  72,  71,  70,  69,  68,  67,  66,  65,
  64,  62,  60,  59,  58,  57,  56,  55,  53,  52,  50,  48,  46,  42,  40,  36,  34,  31,  28,  26,  25,
  24,  23,  22,  21,  19,  12,  9,   7,   245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245,
  245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245,

  245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245
};

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[63] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
};

static yy_state_type yy_last_accepting_state;
static char *        yy_last_accepting_cpos;

extern int yy_flex_debug;
int        yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char * yytext;
#line 1 "../../src/scanner.ll"
/**
 * Copyright (C) 1999-2007  Free Software Foundation, Inc.
 *
 * This file is part of GNU gengetopt
 *
 * GNU gengetopt is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * GNU gengetopt is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
 * Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with gengetopt; see the file COPYING. If not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */
#line 23 "../../src/scanner.ll"
#ifdef HAVE_CONFIG_H
#  include "config.h"
#endif

#include <string.h>

#include "argsdef.h"
#include "parser.h"
extern int gengetopt_count_line;

#include "my_sstream.h"

static void
update_count_line(char * str);
static void
updateTokenInfo(int pos);

// the buffer for strings (possibly spanning more lines)
static std::ostringstream buff;

static void
buffer(const char * s);
static char *
flush_buffer();

#define LINEBUF_LEN 1024

#define PUSH(s) yy_push_state(s);
#define POP() yy_pop_state();

int  tokenpos = 0;
char linebuf[LINEBUF_LEN]; /* current line */

// #define DEBUG_SCANNER
#ifdef DEBUG_SCANNER
#  include <iostream> // for debug
#  define DEB(s) std::cerr << s << std::endl;
#  define DEB2(s, s2) std::cerr << s << ": " << s2 << std::endl;
#else
#  define DEB(s)
#  define DEB2(s, s2)
#endif


#line 692 "../../src/scanner.cc"

#define INITIAL 0
#define SIZE_STATE 1
#define STRING_STATE 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#  include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#  define YY_EXTRA_TYPE void *
#endif

static int
yy_init_globals(void);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int
yylex_destroy(void);

int
yyget_debug(void);

void
yyset_debug(int debug_flag);

YY_EXTRA_TYPE
yyget_extra(void);

void
yyset_extra(YY_EXTRA_TYPE user_defined);

FILE *
yyget_in(void);

void
yyset_in(FILE * in_str);

FILE *
yyget_out(void);

void
yyset_out(FILE * out_str);

int
yyget_leng(void);

char *
yyget_text(void);

int
yyget_lineno(void);

void
yyset_lineno(int line_number);

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#  ifdef __cplusplus
extern "C" int
yywrap(void);
#  else
extern int
yywrap(void);
#  endif
#endif

#ifndef yytext_ptr
static void
yy_flex_strncpy(char *, yyconst char *, int);
#endif

#ifdef YY_NEED_STRLEN
static int
yy_flex_strlen(yyconst char *);
#endif

#ifndef YY_NO_INPUT

#  ifdef __cplusplus
static int
yyinput(void);
#  else
static int
input(void);
#  endif

#endif

static int   yy_start_stack_ptr = 0;
static int   yy_start_stack_depth = 0;
static int * yy_start_stack = NULL;

static void
yy_push_state(int new_state);

static void
yy_pop_state(void);

static int
yy_top_state(void);

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#  ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#    define YY_READ_BUF_SIZE 16384
#  else
#    define YY_READ_BUF_SIZE 8192
#  endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#  define ECHO                              \
    do                                      \
    {                                       \
      if (fwrite(yytext, yyleng, 1, yyout)) \
      {                                     \
      }                                     \
    } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#  define YY_INPUT(buf, result, max_size)                                    \
    if (YY_CURRENT_BUFFER_LVALUE->yy_is_interactive)                         \
    {                                                                        \
      int    c = '*';                                                        \
      size_t n;                                                              \
      for (n = 0; n < max_size && (c = getc(yyin)) != EOF && c != '\n'; ++n) \
        buf[n] = (char)c;                                                    \
      if (c == '\n')                                                         \
        buf[n++] = (char)c;                                                  \
      if (c == EOF && ferror(yyin))                                          \
        YY_FATAL_ERROR("input in flex scanner failed");                      \
      result = n;                                                            \
    }                                                                        \
    else                                                                     \
    {                                                                        \
      errno = 0;                                                             \
      while ((result = fread(buf, 1, max_size, yyin)) == 0 && ferror(yyin))  \
      {                                                                      \
        if (errno != EINTR)                                                  \
        {                                                                    \
          YY_FATAL_ERROR("input in flex scanner failed");                    \
          break;                                                             \
        }                                                                    \
        errno = 0;                                                           \
        clearerr(yyin);                                                      \
      }                                                                      \
    }


#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#  define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#  define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#  define YY_FATAL_ERROR(msg) yy_fatal_error(msg)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#  define YY_DECL_IS_OURS 1

extern int
yylex(void);

#  define YY_DECL int yylex(void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#  define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#  define YY_BREAK break;
#endif

#define YY_RULE_SETUP YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
  yy_state_type yy_current_state;
  char *        yy_cp, *yy_bp;
  int           yy_act;

#line 71 "../../src/scanner.ll"


#line 893 "../../src/scanner.cc"

  if (!(yy_init))
  {
    (yy_init) = 1;

#ifdef YY_USER_INIT
    YY_USER_INIT;
#endif

    if (!(yy_start))
      (yy_start) = 1; /* first start state */

    if (!yyin)
      yyin = stdin;

    if (!yyout)
      yyout = stdout;

    if (!YY_CURRENT_BUFFER)
    {
      yyensure_buffer_stack();
      YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE);
    }

    yy_load_buffer_state();
  }

  while (1) /* loops until end-of-file is reached */
  {
    yy_cp = (yy_c_buf_p);

    /* Support of yytext. */
    *yy_cp = (yy_hold_char);

    /* yy_bp points to the position in yy_ch_buf of the start of
     * the current run.
     */
    yy_bp = yy_cp;

    yy_current_state = (yy_start);
  yy_match:
    do
    {
      YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
      if (yy_accept[yy_current_state])
      {
        (yy_last_accepting_state) = yy_current_state;
        (yy_last_accepting_cpos) = yy_cp;
      }
      while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
      {
        yy_current_state = (int)yy_def[yy_current_state];
        if (yy_current_state >= 246)
          yy_c = yy_meta[(unsigned int)yy_c];
      }
      yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
      ++yy_cp;
    } while (yy_base[yy_current_state] != 272);

  yy_find_action:
    yy_act = yy_accept[yy_current_state];
    if (yy_act == 0)
    { /* have to back up */
      yy_cp = (yy_last_accepting_cpos);
      yy_current_state = (yy_last_accepting_state);
      yy_act = yy_accept[yy_current_state];
    }

    YY_DO_BEFORE_ACTION;

    if (yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act])
    {
      int yyl;
      for (yyl = 0; yyl < yyleng; ++yyl)
        if (yytext[yyl] == '\n')

          yylineno++;
      ;
    }

  do_action: /* This label is used only to access EOF actions. */

    switch (yy_act)
    {         /* beginning of action switch */
      case 0: /* must back up */
        /* undo the effects of YY_DO_BEFORE_ACTION */
        *yy_cp = (yy_hold_char);
        yy_cp = (yy_last_accepting_cpos);
        yy_current_state = (yy_last_accepting_state);
        goto yy_find_action;

      case 1:
        YY_RULE_SETUP
#line 74 "../../src/scanner.ll"
        updateTokenInfo(-1);
        yylval.argtype = ARG_STRING;
        return TOK_ARGTYPE;
        YY_BREAK
      case 2:
        YY_RULE_SETUP
#line 75 "../../src/scanner.ll"
        updateTokenInfo(-1);
        yylval.argtype = ARG_INT;
        return TOK_ARGTYPE;
        YY_BREAK
      case 3:
        YY_RULE_SETUP
#line 76 "../../src/scanner.ll"
        updateTokenInfo(-1);
        yylval.argtype = ARG_SHORT;
        return TOK_ARGTYPE;
        YY_BREAK
      case 4:
        YY_RULE_SETUP
#line 77 "../../src/scanner.ll"
        updateTokenInfo(-1);
        yylval.argtype = ARG_LONG;
        return TOK_ARGTYPE;
        YY_BREAK
      case 5:
        YY_RULE_SETUP
#line 78 "../../src/scanner.ll"
        updateTokenInfo(-1);
        yylval.argtype = ARG_FLOAT;
        return TOK_ARGTYPE;
        YY_BREAK
      case 6:
        YY_RULE_SETUP
#line 79 "../../src/scanner.ll"
        updateTokenInfo(-1);
        yylval.argtype = ARG_DOUBLE;
        return TOK_ARGTYPE;
        YY_BREAK
      case 7:
        YY_RULE_SETUP
#line 80 "../../src/scanner.ll"
        updateTokenInfo(-1);
        yylval.argtype = ARG_LONGDOUBLE;
        return TOK_ARGTYPE;
        YY_BREAK
      case 8:
        YY_RULE_SETUP
#line 81 "../../src/scanner.ll"
        updateTokenInfo(-1);
        yylval.argtype = ARG_LONGLONG;
        return TOK_ARGTYPE;
        YY_BREAK
      case 9:
        YY_RULE_SETUP
#line 82 "../../src/scanner.ll"
        updateTokenInfo(-1);
        yylval.argtype = ARG_ENUM;
        return TOK_ARGTYPE;
        YY_BREAK
      case 10:
        YY_RULE_SETUP
#line 84 "../../src/scanner.ll"
        updateTokenInfo(-1);
        return TOK_PACKAGE;
        YY_BREAK
      case 11:
        YY_RULE_SETUP
#line 85 "../../src/scanner.ll"
        updateTokenInfo(-1);
        return TOK_VERSION;
        YY_BREAK
      case 12:
        YY_RULE_SETUP
#line 86 "../../src/scanner.ll"
        updateTokenInfo(-1);
        yylloc.first_line = gengetopt_count_line;
        return TOK_GROUPOPTION;
        YY_BREAK
      case 13:
        YY_RULE_SETUP
#line 87 "../../src/scanner.ll"
        updateTokenInfo(-1);
        yylloc.first_line = gengetopt_count_line;
        return TOK_MODEOPTION;
        YY_BREAK
      case 14:
        YY_RULE_SETUP
#line 88 "../../src/scanner.ll"
        updateTokenInfo(-1);
        return TOK_YES;
        YY_BREAK
      case 15:
        YY_RULE_SETUP
#line 89 "../../src/scanner.ll"
        updateTokenInfo(-1);
        return TOK_NO;
        YY_BREAK
      case 16:
        YY_RULE_SETUP
#line 90 "../../src/scanner.ll"
        updateTokenInfo(-1);
        yylloc.first_line = gengetopt_count_line;
        return TOK_OPTION;
        YY_BREAK
      case 17:
        YY_RULE_SETUP
#line 91 "../../src/scanner.ll"
        updateTokenInfo(-1);
        return TOK_FLAG;
        YY_BREAK
      case 18:
        YY_RULE_SETUP
#line 92 "../../src/scanner.ll"
        updateTokenInfo(-1);
        return TOK_ON;
        YY_BREAK
      case 19:
        YY_RULE_SETUP
#line 93 "../../src/scanner.ll"
        updateTokenInfo(-1);
        return TOK_OFF;
        YY_BREAK
      case 20:
        YY_RULE_SETUP
#line 94 "../../src/scanner.ll"
        updateTokenInfo(-1);
        return TOK_PURPOSE;
        YY_BREAK
      case 21:
        YY_RULE_SETUP
#line 95 "../../src/scanner.ll"
        updateTokenInfo(-1);
        return TOK_DESCRIPTION;
        YY_BREAK
      case 22:
        YY_RULE_SETUP
#line 96 "../../src/scanner.ll"
        updateTokenInfo(-1);
        return TOK_USAGE;
        YY_BREAK
      case 23:
        YY_RULE_SETUP
#line 97 "../../src/scanner.ll"
        updateTokenInfo(-1);
        return TOK_DEFAULT;
        YY_BREAK
      case 24:
        YY_RULE_SETUP
#line 98 "../../src/scanner.ll"
        updateTokenInfo(-1);
        return TOK_TYPESTR;
        YY_BREAK
      case 25:
        YY_RULE_SETUP
#line 99 "../../src/scanner.ll"
        updateTokenInfo(-1);
        return TOK_GROUP;
        YY_BREAK
      case 26:
        YY_RULE_SETUP
#line 100 "../../src/scanner.ll"
        updateTokenInfo(-1);
        return TOK_GROUPDESC;
        YY_BREAK
      case 27:
        YY_RULE_SETUP
#line 101 "../../src/scanner.ll"
        updateTokenInfo(-1);
        return TOK_DEFGROUP;
        YY_BREAK
      case 28:
        YY_RULE_SETUP
#line 102 "../../src/scanner.ll"
        updateTokenInfo(-1);
        return TOK_MODE;
        YY_BREAK
      case 29:
        YY_RULE_SETUP
#line 103 "../../src/scanner.ll"
        updateTokenInfo(-1);
        return TOK_MODEDESC;
        YY_BREAK
      case 30:
        YY_RULE_SETUP
#line 104 "../../src/scanner.ll"
        updateTokenInfo(-1);
        return TOK_DEFMODE;
        YY_BREAK
      case 31:
        YY_RULE_SETUP
#line 105 "../../src/scanner.ll"
        updateTokenInfo(-1);
        return TOK_MULTIPLE;
        YY_BREAK
      case 32:
        YY_RULE_SETUP
#line 106 "../../src/scanner.ll"
        updateTokenInfo(-1);
        return TOK_ARGOPTIONAL;
        YY_BREAK
      case 33:
        YY_RULE_SETUP
#line 107 "../../src/scanner.ll"
        updateTokenInfo(-1);
        return TOK_SECTIONDESC;
        YY_BREAK
      case 34:
        YY_RULE_SETUP
#line 108 "../../src/scanner.ll"
        updateTokenInfo(-1);
        return TOK_SECTION;
        YY_BREAK
      case 35:
        YY_RULE_SETUP
#line 109 "../../src/scanner.ll"
        updateTokenInfo(-1);
        return TOK_VALUES;
        YY_BREAK
      case 36:
        YY_RULE_SETUP
#line 110 "../../src/scanner.ll"
        updateTokenInfo(-1);
        return TOK_HIDDEN;
        YY_BREAK
      case 37:
        YY_RULE_SETUP
#line 111 "../../src/scanner.ll"
        updateTokenInfo(-1);
        return TOK_DEPENDON;
        YY_BREAK
      case 38:
        YY_RULE_SETUP
#line 112 "../../src/scanner.ll"
        updateTokenInfo(-1);
        return TOK_DETAILS;
        YY_BREAK
      case 39:
        YY_RULE_SETUP
#line 113 "../../src/scanner.ll"
        updateTokenInfo(-1);
        return TOK_TEXT;
        YY_BREAK
      case 40:
        YY_RULE_SETUP
#line 114 "../../src/scanner.ll"
        updateTokenInfo(-1);
        return TOK_ARGS;
        YY_BREAK
      case 41:
        YY_RULE_SETUP
#line 116 "../../src/scanner.ll"
        {
          updateTokenInfo(-1);
          return '=';
        }
        YY_BREAK
      case 42:
        YY_RULE_SETUP
#line 117 "../../src/scanner.ll"
        {
          updateTokenInfo(-1);
          return ',';
        }
        YY_BREAK
      case 43:
        YY_RULE_SETUP
#line 119 "../../src/scanner.ll"
        {
          PUSH(SIZE_STATE);
          updateTokenInfo(-1);
          return '(';
        }
        YY_BREAK
      case 44:
        YY_RULE_SETUP
#line 120 "../../src/scanner.ll"
        {
          updateTokenInfo(-1);
          return '-';
        }
        YY_BREAK
      case 45:
        YY_RULE_SETUP
#line 121 "../../src/scanner.ll"
        {
          updateTokenInfo(-1);
          yylval.str = strdup(yytext);
          return TOK_SIZE;
        }
        YY_BREAK
      case 46:
        YY_RULE_SETUP
#line 122 "../../src/scanner.ll"
        {
          POP();
          updateTokenInfo(-1);
          return ')';
        }
        YY_BREAK
      case 47:
        YY_RULE_SETUP
#line 124 "../../src/scanner.ll"
        updateTokenInfo(-1);
        yylval.chr = yytext[0];
        return TOK_CHAR;
        YY_BREAK
      case 48:
        YY_RULE_SETUP
#line 126 "../../src/scanner.ll"
        {
          updateTokenInfo(-1);
          DEB("start string");
          PUSH(STRING_STATE);
        }
        YY_BREAK
      case 49:
        YY_RULE_SETUP
#line 127 "../../src/scanner.ll"
        {
          updateTokenInfo(2);
          buffer("\\\\n");
        }
        YY_BREAK
      case 50:
        YY_RULE_SETUP
#line 128 "../../src/scanner.ll"
        {
          updateTokenInfo(1);
          buffer("\n");
        }
        YY_BREAK
      case 51:
        /* rule 51 can match eol */
        YY_RULE_SETUP
#line 129 "../../src/scanner.ll"
        {
          update_count_line(yytext);
          buffer(yytext);
        }
        YY_BREAK
      case 52:
        /* rule 52 can match eol */
        YY_RULE_SETUP
#line 130 "../../src/scanner.ll"
        {
          update_count_line(yytext); /* a line break */
        }
        YY_BREAK
      case 53:
        YY_RULE_SETUP
#line 131 "../../src/scanner.ll"
        {
          updateTokenInfo(-1);
          buffer(yytext);
        }
        YY_BREAK
      case 54:
        YY_RULE_SETUP
#line 132 "../../src/scanner.ll"
        {
          updateTokenInfo(-1);
          DEB("end string");
          POP();
          yylval.str = flush_buffer();
          return TOK_STRING;
        }
        YY_BREAK
      case 55:
        YY_RULE_SETUP
#line 133 "../../src/scanner.ll"
        {
          updateTokenInfo(-1);
          buffer(yytext);
        }
        YY_BREAK
      case 56:
        YY_RULE_SETUP
#line 135 "../../src/scanner.ll"
        updateTokenInfo(-1);
        YY_BREAK
      case 57:
        YY_RULE_SETUP
#line 136 "../../src/scanner.ll"
        updateTokenInfo(8 * yyleng);
        YY_BREAK
      case 58:
        YY_RULE_SETUP
#line 138 "../../src/scanner.ll"
        /* comments begin with # in any place (but strings) */
        YY_BREAK
      case 59:
        /* rule 59 can match eol */
        YY_RULE_SETUP
#line 139 "../../src/scanner.ll"
        update_count_line(0);
        yyless(1); /* give back all but the \n to rescan */
        YY_BREAK
      case 60:
        YY_RULE_SETUP
#line 141 "../../src/scanner.ll"
        {}
        YY_BREAK
      case 61:
        YY_RULE_SETUP
#line 143 "../../src/scanner.ll"
        {
          return 1000; /* little hack to produce a parse error too. */
        }
        YY_BREAK
      case 62:
        YY_RULE_SETUP
#line 147 "../../src/scanner.ll"
        ECHO;
        YY_BREAK
#line 1301 "../../src/scanner.cc"
      case YY_STATE_EOF(INITIAL):
      case YY_STATE_EOF(SIZE_STATE):
      case YY_STATE_EOF(STRING_STATE):
        yyterminate();

      case YY_END_OF_BUFFER:
      {
        /* Amount of text matched not including the EOB char. */
        int yy_amount_of_matched_text = (int)(yy_cp - (yytext_ptr)) - 1;

        /* Undo the effects of YY_DO_BEFORE_ACTION. */
        *yy_cp = (yy_hold_char);
        YY_RESTORE_YY_MORE_OFFSET

        if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW)
        {
          /* We're scanning a new file or input source.  It's
           * possible that this happened because the user
           * just pointed yyin at a new source and called
           * yylex().  If so, then we have to assure
           * consistency between YY_CURRENT_BUFFER and our
           * globals.  Here is the right place to do so, because
           * this is the first action (other than possibly a
           * back-up) that will match for the new input source.
           */
          (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
          YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
          YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
        }

        /* Note that here we test for yy_c_buf_p "<=" to the position
         * of the first EOB in the buffer, since yy_c_buf_p will
         * already have been incremented past the NUL character
         * (since all states make transitions on EOB to the
         * end-of-buffer state).  Contrast this with the test
         * in input().
         */
        if ((yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)])
        { /* This was really a NUL. */
          yy_state_type yy_next_state;

          (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

          yy_current_state = yy_get_previous_state();

          /* Okay, we're now positioned to make the NUL
           * transition.  We couldn't have
           * yy_get_previous_state() go ahead and do it
           * for us because it doesn't know how to deal
           * with the possibility of jamming (and we don't
           * want to build jamming into it because then it
           * will run more slowly).
           */

          yy_next_state = yy_try_NUL_trans(yy_current_state);

          yy_bp = (yytext_ptr) + YY_MORE_ADJ;

          if (yy_next_state)
          {
            /* Consume the NUL. */
            yy_cp = ++(yy_c_buf_p);
            yy_current_state = yy_next_state;
            goto yy_match;
          }

          else
          {
            yy_cp = (yy_c_buf_p);
            goto yy_find_action;
          }
        }

        else
          switch (yy_get_next_buffer())
          {
            case EOB_ACT_END_OF_FILE:
            {
              (yy_did_buffer_switch_on_eof) = 0;

              if (yywrap())
              {
                /* Note: because we've taken care in
                 * yy_get_next_buffer() to have set up
                 * yytext, we can now set up
                 * yy_c_buf_p so that if some total
                 * hoser (like flex itself) wants to
                 * call the scanner after we return the
                 * YY_NULL, it'll still work - another
                 * YY_NULL will get returned.
                 */
                (yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

                yy_act = YY_STATE_EOF(YY_START);
                goto do_action;
              }

              else
              {
                if (!(yy_did_buffer_switch_on_eof))
                  YY_NEW_FILE;
              }
              break;
            }

            case EOB_ACT_CONTINUE_SCAN:
              (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

              yy_current_state = yy_get_previous_state();

              yy_cp = (yy_c_buf_p);
              yy_bp = (yytext_ptr) + YY_MORE_ADJ;
              goto yy_match;

            case EOB_ACT_LAST_MATCH:
              (yy_c_buf_p) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

              yy_current_state = yy_get_previous_state();

              yy_cp = (yy_c_buf_p);
              yy_bp = (yytext_ptr) + YY_MORE_ADJ;
              goto yy_find_action;
          }
        break;
      }

      default:
        YY_FATAL_ERROR("fatal flex scanner internal error--no action found");
    } /* end of action switch */
  } /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int
yy_get_next_buffer(void)
{
  char * dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
  char * source = (yytext_ptr);
  int    number_to_move, i;
  int    ret_val;

  if ((yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1])
    YY_FATAL_ERROR("fatal flex scanner internal error--end of buffer missed");

  if (YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0)
  { /* Don't try to fill the buffer, so this is an EOF. */
    if ((yy_c_buf_p) - (yytext_ptr)-YY_MORE_ADJ == 1)
    {
      /* We matched a single character, the EOB, so
       * treat this as a final EOF.
       */
      return EOB_ACT_END_OF_FILE;
    }

    else
    {
      /* We matched some text prior to the EOB, first
       * process it.
       */
      return EOB_ACT_LAST_MATCH;
    }
  }

  /* Try to read more data. */

  /* First move last chars to start of buffer. */
  number_to_move = (int)((yy_c_buf_p) - (yytext_ptr)) - 1;

  for (i = 0; i < number_to_move; ++i)
    *(dest++) = *(source++);

  if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING)
    /* don't do the read, it's not guaranteed to return an EOF,
     * just force an EOF
     */
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

  else
  {
    int num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

    while (num_to_read <= 0)
    { /* Not enough room in the buffer - grow it. */

      /* just a shorter name for the current buffer */
      YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

      int yy_c_buf_p_offset = (int)((yy_c_buf_p)-b->yy_ch_buf);

      if (b->yy_is_our_buffer)
      {
        int new_size = b->yy_buf_size * 2;

        if (new_size <= 0)
          b->yy_buf_size += b->yy_buf_size / 8;
        else
          b->yy_buf_size *= 2;

        b->yy_ch_buf = (char *)
          /* Include room in for 2 EOB chars. */
          yyrealloc((void *)b->yy_ch_buf, b->yy_buf_size + 2);
      }
      else
        /* Can't grow it, we don't own it. */
        b->yy_ch_buf = 0;

      if (!b->yy_ch_buf)
        YY_FATAL_ERROR("fatal error - scanner input buffer overflow");

      (yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

      num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
    }

    if (num_to_read > YY_READ_BUF_SIZE)
      num_to_read = YY_READ_BUF_SIZE;

    /* Read in more data. */
    YY_INPUT((&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]), (yy_n_chars), (size_t)num_to_read);

    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
  }

  if ((yy_n_chars) == 0)
  {
    if (number_to_move == YY_MORE_ADJ)
    {
      ret_val = EOB_ACT_END_OF_FILE;
      yyrestart(yyin);
    }

    else
    {
      ret_val = EOB_ACT_LAST_MATCH;
      YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_EOF_PENDING;
    }
  }

  else
    ret_val = EOB_ACT_CONTINUE_SCAN;

  if ((yy_size_t)((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size)
  {
    /* Extend the array by 50%, plus the number we really need. */
    yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *)yyrealloc((void *)YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, new_size);
    if (!YY_CURRENT_BUFFER_LVALUE->yy_ch_buf)
      YY_FATAL_ERROR("out of dynamic memory in yy_get_next_buffer()");
  }

  (yy_n_chars) += number_to_move;
  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

  (yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

  return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type
yy_get_previous_state(void)
{
  yy_state_type yy_current_state;
  char *        yy_cp;

  yy_current_state = (yy_start);

  for (yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp)
  {
    YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
    if (yy_accept[yy_current_state])
    {
      (yy_last_accepting_state) = yy_current_state;
      (yy_last_accepting_cpos) = yy_cp;
    }
    while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
    {
      yy_current_state = (int)yy_def[yy_current_state];
      if (yy_current_state >= 246)
        yy_c = yy_meta[(unsigned int)yy_c];
    }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
  }

  return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
static yy_state_type
yy_try_NUL_trans(yy_state_type yy_current_state)
{
  int    yy_is_jam;
  char * yy_cp = (yy_c_buf_p);

  YY_CHAR yy_c = 1;
  if (yy_accept[yy_current_state])
  {
    (yy_last_accepting_state) = yy_current_state;
    (yy_last_accepting_cpos) = yy_cp;
  }
  while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
  {
    yy_current_state = (int)yy_def[yy_current_state];
    if (yy_current_state >= 246)
      yy_c = yy_meta[(unsigned int)yy_c];
  }
  yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
  yy_is_jam = (yy_current_state == 245);

  return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#  ifdef __cplusplus
static int
yyinput(void)
#  else
static int
input(void)
#  endif

{
  int c;

  *(yy_c_buf_p) = (yy_hold_char);

  if (*(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR)
  {
    /* yy_c_buf_p now points to the character we want to return.
     * If this occurs *before* the EOB characters, then it's a
     * valid NUL; if not, then we've hit the end of the buffer.
     */
    if ((yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)])
      /* This was really a NUL. */
      *(yy_c_buf_p) = '\0';

    else
    { /* need more input */
      int offset = (yy_c_buf_p) - (yytext_ptr);
      ++(yy_c_buf_p);

      switch (yy_get_next_buffer())
      {
        case EOB_ACT_LAST_MATCH:
          /* This happens because yy_g_n_b()
           * sees that we've accumulated a
           * token and flags that we need to
           * try matching the token before
           * proceeding.  But for input(),
           * there's no matching to consider.
           * So convert the EOB_ACT_LAST_MATCH
           * to EOB_ACT_END_OF_FILE.
           */

          /* Reset buffer status. */
          yyrestart(yyin);

          /*FALLTHROUGH*/

        case EOB_ACT_END_OF_FILE:
        {
          if (yywrap())
            return EOF;

          if (!(yy_did_buffer_switch_on_eof))
            YY_NEW_FILE;
#  ifdef __cplusplus
          return yyinput();
#  else
          return input();
#  endif
        }

        case EOB_ACT_CONTINUE_SCAN:
          (yy_c_buf_p) = (yytext_ptr) + offset;
          break;
      }
    }
  }

  c = *(unsigned char *)(yy_c_buf_p); /* cast for 8-bit char's */
  *(yy_c_buf_p) = '\0';               /* preserve yytext */
  (yy_hold_char) = *++(yy_c_buf_p);

  if (c == '\n')

    yylineno++;
  ;

  return c;
}
#endif /* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
void
yyrestart(FILE * input_file)
{

  if (!YY_CURRENT_BUFFER)
  {
    yyensure_buffer_stack();
    YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE);
  }

  yy_init_buffer(YY_CURRENT_BUFFER, input_file);
  yy_load_buffer_state();
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 *
 */
void
yy_switch_to_buffer(YY_BUFFER_STATE new_buffer)
{

  /* TODO. We should be able to replace this entire function body
   * with
   *		yypop_buffer_state();
   *		yypush_buffer_state(new_buffer);
   */
  yyensure_buffer_stack();
  if (YY_CURRENT_BUFFER == new_buffer)
    return;

  if (YY_CURRENT_BUFFER)
  {
    /* Flush out information for old buffer. */
    *(yy_c_buf_p) = (yy_hold_char);
    YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
  }

  YY_CURRENT_BUFFER_LVALUE = new_buffer;
  yy_load_buffer_state();

  /* We don't actually know whether we did this switch during
   * EOF (yywrap()) processing, but the only time this flag
   * is looked at is after yywrap() is called, so it's safe
   * to go ahead and always set it.
   */
  (yy_did_buffer_switch_on_eof) = 1;
}

static void
yy_load_buffer_state(void)
{
  (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
  (yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
  yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
  (yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
YY_BUFFER_STATE
yy_create_buffer(FILE * file, int size)
{
  YY_BUFFER_STATE b;

  b = (YY_BUFFER_STATE)yyalloc(sizeof(struct yy_buffer_state));
  if (!b)
    YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

  b->yy_buf_size = size;

  /* yy_ch_buf has to be 2 characters longer than the size given because
   * we need to put in 2 end-of-buffer characters.
   */
  b->yy_ch_buf = (char *)yyalloc(b->yy_buf_size + 2);
  if (!b->yy_ch_buf)
    YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

  b->yy_is_our_buffer = 1;

  yy_init_buffer(b, file);

  return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 *
 */
void
yy_delete_buffer(YY_BUFFER_STATE b)
{

  if (!b)
    return;

  if (b == YY_CURRENT_BUFFER) /* Not sure if we should pop here. */
    YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE)0;

  if (b->yy_is_our_buffer)
    yyfree((void *)b->yy_ch_buf);

  yyfree((void *)b);
}

#ifndef __cplusplus
extern int
isatty(int);
#endif /* __cplusplus */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
static void
yy_init_buffer(YY_BUFFER_STATE b, FILE * file)

{
  int oerrno = errno;

  yy_flush_buffer(b);

  b->yy_input_file = file;
  b->yy_fill_buffer = 1;

  /* If b is the current buffer, then yy_init_buffer was _probably_
   * called from yyrestart() or through yy_get_next_buffer.
   * In that case, we don't want to reset the lineno or column.
   */
  if (b != YY_CURRENT_BUFFER)
  {
    b->yy_bs_lineno = 1;
    b->yy_bs_column = 0;
  }

  b->yy_is_interactive = file ? (isatty(fileno(file)) > 0) : 0;

  errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
void
yy_flush_buffer(YY_BUFFER_STATE b)
{
  if (!b)
    return;

  b->yy_n_chars = 0;

  /* We always need two end-of-buffer characters.  The first causes
   * a transition to the end-of-buffer state.  The second causes
   * a jam in that state.
   */
  b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
  b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

  b->yy_buf_pos = &b->yy_ch_buf[0];

  b->yy_at_bol = 1;
  b->yy_buffer_status = YY_BUFFER_NEW;

  if (b == YY_CURRENT_BUFFER)
    yy_load_buffer_state();
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *
 */
void
yypush_buffer_state(YY_BUFFER_STATE new_buffer)
{
  if (new_buffer == NULL)
    return;

  yyensure_buffer_stack();

  /* This block is copied from yy_switch_to_buffer. */
  if (YY_CURRENT_BUFFER)
  {
    /* Flush out information for old buffer. */
    *(yy_c_buf_p) = (yy_hold_char);
    YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
  }

  /* Only push if top exists. Otherwise, replace top. */
  if (YY_CURRENT_BUFFER)
    (yy_buffer_stack_top)++;
  YY_CURRENT_BUFFER_LVALUE = new_buffer;

  /* copied from yy_switch_to_buffer. */
  yy_load_buffer_state();
  (yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *
 */
void
yypop_buffer_state(void)
{
  if (!YY_CURRENT_BUFFER)
    return;

  yy_delete_buffer(YY_CURRENT_BUFFER);
  YY_CURRENT_BUFFER_LVALUE = NULL;
  if ((yy_buffer_stack_top) > 0)
    --(yy_buffer_stack_top);

  if (YY_CURRENT_BUFFER)
  {
    yy_load_buffer_state();
    (yy_did_buffer_switch_on_eof) = 1;
  }
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void
yyensure_buffer_stack(void)
{
  int num_to_alloc;

  if (!(yy_buffer_stack))
  {

    /* First allocation is just for 2 elements, since we don't know if this
     * scanner will even need a stack. We use 2 instead of 1 to avoid an
     * immediate realloc on the next call.
     */
    num_to_alloc = 1;
    (yy_buffer_stack) = (struct yy_buffer_state **)yyalloc(num_to_alloc * sizeof(struct yy_buffer_state *));
    if (!(yy_buffer_stack))
      YY_FATAL_ERROR("out of dynamic memory in yyensure_buffer_stack()");

    memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state *));

    (yy_buffer_stack_max) = num_to_alloc;
    (yy_buffer_stack_top) = 0;
    return;
  }

  if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max))-1)
  {

    /* Increase the buffer to prepare for a possible push. */
    int grow_size = 8 /* arbitrary grow size */;

    num_to_alloc = (yy_buffer_stack_max) + grow_size;
    (yy_buffer_stack) =
      (struct yy_buffer_state **)yyrealloc((yy_buffer_stack), num_to_alloc * sizeof(struct yy_buffer_state *));
    if (!(yy_buffer_stack))
      YY_FATAL_ERROR("out of dynamic memory in yyensure_buffer_stack()");

    /* zero only the new slots.*/
    memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state *));
    (yy_buffer_stack_max) = num_to_alloc;
  }
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE
yy_scan_buffer(char * base, yy_size_t size)
{
  YY_BUFFER_STATE b;

  if (size < 2 || base[size - 2] != YY_END_OF_BUFFER_CHAR || base[size - 1] != YY_END_OF_BUFFER_CHAR)
    /* They forgot to leave room for the EOB's. */
    return 0;

  b = (YY_BUFFER_STATE)yyalloc(sizeof(struct yy_buffer_state));
  if (!b)
    YY_FATAL_ERROR("out of dynamic memory in yy_scan_buffer()");

  b->yy_buf_size = size - 2; /* "- 2" to take care of EOB's */
  b->yy_buf_pos = b->yy_ch_buf = base;
  b->yy_is_our_buffer = 0;
  b->yy_input_file = 0;
  b->yy_n_chars = b->yy_buf_size;
  b->yy_is_interactive = 0;
  b->yy_at_bol = 1;
  b->yy_fill_buffer = 0;
  b->yy_buffer_status = YY_BUFFER_NEW;

  yy_switch_to_buffer(b);

  return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 *
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE
yy_scan_string(yyconst char * yystr) { return yy_scan_bytes(yystr, strlen(yystr)); }

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE
yy_scan_bytes(yyconst char * yybytes, int _yybytes_len)
{
  YY_BUFFER_STATE b;
  char *          buf;
  yy_size_t       n;
  int             i;

  /* Get memory for full buffer, including space for trailing EOB's. */
  n = _yybytes_len + 2;
  buf = (char *)yyalloc(n);
  if (!buf)
    YY_FATAL_ERROR("out of dynamic memory in yy_scan_bytes()");

  for (i = 0; i < _yybytes_len; ++i)
    buf[i] = yybytes[i];

  buf[_yybytes_len] = buf[_yybytes_len + 1] = YY_END_OF_BUFFER_CHAR;

  b = yy_scan_buffer(buf, n);
  if (!b)
    YY_FATAL_ERROR("bad buffer in yy_scan_bytes()");

  /* It's okay to grow etc. this buffer, and we should throw it
   * away when we're done.
   */
  b->yy_is_our_buffer = 1;

  return b;
}

static void
yy_push_state(int new_state)
{
  if ((yy_start_stack_ptr) >= (yy_start_stack_depth))
  {
    yy_size_t new_size;

    (yy_start_stack_depth) += YY_START_STACK_INCR;
    new_size = (yy_start_stack_depth) * sizeof(int);

    if (!(yy_start_stack))
      (yy_start_stack) = (int *)yyalloc(new_size);

    else
      (yy_start_stack) = (int *)yyrealloc((void *)(yy_start_stack), new_size);

    if (!(yy_start_stack))
      YY_FATAL_ERROR("out of memory expanding start-condition stack");
  }

  (yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

  BEGIN(new_state);
}

static void
yy_pop_state(void)
{
  if (--(yy_start_stack_ptr) < 0)
    YY_FATAL_ERROR("start-condition stack underflow");

  BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

static int
yy_top_state(void)
{
  return (yy_start_stack)[(yy_start_stack_ptr)-1];
}

#ifndef YY_EXIT_FAILURE
#  define YY_EXIT_FAILURE 2
#endif

static void
yy_fatal_error(yyconst char * msg)
{
  (void)fprintf(stderr, "%s\n", msg);
  exit(YY_EXIT_FAILURE);
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n)                             \
  do                                          \
  {                                           \
    /* Undo effects of setting up yytext. */  \
    int yyless_macro_arg = (n);               \
    YY_LESS_LINENO(yyless_macro_arg);         \
    yytext[yyleng] = (yy_hold_char);          \
    (yy_c_buf_p) = yytext + yyless_macro_arg; \
    (yy_hold_char) = *(yy_c_buf_p);           \
    *(yy_c_buf_p) = '\0';                     \
    yyleng = yyless_macro_arg;                \
  } while (0)

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 *
 */
int
yyget_lineno(void)
{

  return yylineno;
}

/** Get the input stream.
 *
 */
FILE *
yyget_in(void)
{
  return yyin;
}

/** Get the output stream.
 *
 */
FILE *
yyget_out(void)
{
  return yyout;
}

/** Get the length of the current token.
 *
 */
int
yyget_leng(void)
{
  return yyleng;
}

/** Get the current token.
 *
 */

char *
yyget_text(void)
{
  return yytext;
}

/** Set the current line number.
 * @param line_number
 *
 */
void
yyset_lineno(int line_number)
{

  yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 *
 * @see yy_switch_to_buffer
 */
void
yyset_in(FILE * in_str)
{
  yyin = in_str;
}

void
yyset_out(FILE * out_str)
{
  yyout = out_str;
}

int
yyget_debug(void)
{
  return yy_flex_debug;
}

void
yyset_debug(int bdebug)
{
  yy_flex_debug = bdebug;
}

static int
yy_init_globals(void)
{
  /* Initialization is the same as for the non-reentrant scanner.
   * This function is called from yylex_destroy(), so don't allocate here.
   */

  /* We do not touch yylineno unless the option is enabled. */
  yylineno = 1;

  (yy_buffer_stack) = 0;
  (yy_buffer_stack_top) = 0;
  (yy_buffer_stack_max) = 0;
  (yy_c_buf_p) = (char *)0;
  (yy_init) = 0;
  (yy_start) = 0;

  (yy_start_stack_ptr) = 0;
  (yy_start_stack_depth) = 0;
  (yy_start_stack) = NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
  yyin = stdin;
  yyout = stdout;
#else
  yyin = (FILE *)0;
  yyout = (FILE *)0;
#endif

  /* For future reference: Set errno on error, since we are called by
   * yylex_init()
   */
  return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int
yylex_destroy(void)
{

  /* Pop the buffer stack, destroying each element. */
  while (YY_CURRENT_BUFFER)
  {
    yy_delete_buffer(YY_CURRENT_BUFFER);
    YY_CURRENT_BUFFER_LVALUE = NULL;
    yypop_buffer_state();
  }

  /* Destroy the stack itself. */
  yyfree((yy_buffer_stack));
  (yy_buffer_stack) = NULL;

  /* Destroy the start condition stack. */
  yyfree((yy_start_stack));
  (yy_start_stack) = NULL;

  /* Reset the globals. This is important in a non-reentrant scanner so the next time
   * yylex() is called, initialization will occur. */
  yy_init_globals();

  return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void
yy_flex_strncpy(char * s1, yyconst char * s2, int n)
{
  int i;
  for (i = 0; i < n; ++i)
    s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int
yy_flex_strlen(yyconst char * s)
{
  int n;
  for (n = 0; s[n]; ++n)
    ;

  return n;
}
#endif

void *
yyalloc(yy_size_t size)
{
  return (void *)malloc(size);
}

void *
yyrealloc(void * ptr, yy_size_t size)
{
  /* The cast to (char *) in the following accommodates both
   * implementations that use char* generic pointers, and those
   * that use void* generic pointers.  It works with the latter
   * because both ANSI C and C++ allow castless assignment from
   * any pointer type to void*, and deal with argument conversions
   * as though doing an assignment.
   */
  return (void *)realloc((char *)ptr, size);
}

void
yyfree(void * ptr)
{
  free((char *)ptr); /* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 147 "../../src/scanner.ll"


/*
  Otherwise '\n' within a TOK_MLSTRING would not be counted
*/
void
update_count_line(char * str)
{
  if (str)
  {
    char * p;
    for (p = str; *p; ++p)
      if (*p == '\n')
      {
        ++gengetopt_count_line;
        tokenpos = 0; /* reset token position */
        strncpy(linebuf, ((p + 1) ? p + 1 : ""), LINEBUF_LEN - 1);
      }
  }
  else
  {
    ++gengetopt_count_line;
    tokenpos = 0;                                  /* reset token position */
    strncpy(linebuf, yytext + 1, LINEBUF_LEN - 1); /* save the next line */
  }
}

void
updateTokenInfo(int pos)
{
  if (pos >= 0)
    tokenpos += pos;
  else
    tokenpos += yyleng;
}

void
buffer(const char * s)
{
  buff << s;
}

char *
flush_buffer()
{
  char * ret = strdup(buff.str().c_str());
  buff.str("");
  return ret;
}
